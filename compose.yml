services:
  webserver:
    build:
      context: .
      dockerfile: Containerfile
    env_file:
      - .env
    container_name: ${WEBSERVER_HOST}
    depends_on:
      - proxy
      - database
    networks:
      - athenet

  proxy:
    image: nginx:stable-alpine
    restart: always
    container_name: ${NGINX_HOST}
    env_file:
      - .env
    environment:
      - NGINX_HOST=${NGINX_HOST}
      - NGINX_PORT=${NGINX_PORT}
      - WEBSERVER_HOST=${WEBSERVER_HOST}
      - WEBSERVER_PORT=${WEBSERVER_PORT}
    volumes:
      - ./container/nginx:/etc/nginx/templates
    ports:
      - ${NGINX_PORT}:${NGINX_PORT}
    networks:
      - athenet

  database:
    image: postgres:16-alpine
    container_name: ${SERVER_DB_HOST}
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${SERVER_DB_USER}
      - POSTGRES_PASSWORD=${SERVER_DB_PASS}
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - athenet

  adminer:
    image: adminer:4.8.1-standalone
    container_name: "${ADMINER_HOST}"
    restart: always
    ports:
      - ${ADMINER_PORT}:${ADMINER_PORT}
    depends_on:
      - database
    networks:
      - athenet

volumes:
  pg-data:


networks:
  athenet:
